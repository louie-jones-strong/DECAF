services:
  reverb-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: project_image
    volumes:
      # add output dictionary for the learned data
      - ML_Data:/app/data

    working_dir: /app
    networks:
      - projectNetwork
    ports:
      - "8000:8000"  # Expose port 8000 for communication
    command:
      - sh
      - -c
      - |
        reverb_server --config="port: 8000
          tables: {
            table_name: \"my_table\"
            sampler: {
              fifo: true
            }
            remover: {
              fifo: true
            }
            max_size: 200 max_times_sampled: 5
            rate_limiter: {
              min_size_to_sample: 1
              samples_per_insert: 1
              min_diff: $(python3 -c "import sys; print(-sys.float_info.max)")
              max_diff: $(python3 -c "import sys; print(sys.float_info.max)")
            }
          }"

  model-store:
    image: redis

    volumes:
      - ML_Data:/app/data

    working_dir: /app
    networks:
      - projectNetwork
    ports:
      - "6000:6000"

    entrypoint: redis-server --port 6000 --save 60 1



  web-server:
    image: project_image

    volumes:
      # dictionaries for dev
      - .:/app/Dev_Source

    working_dir: /app
    networks:
      - projectNetwork
    ports:
      - "5000:5000"
    command:
      - sh
      - -c
      - |
        python Dev_Source/WebServer/app.py


  worker:
    image: project_image

    volumes:
      # add output dictionary for the learned data
      - ML_Data:/app/data

      # dictionaries for dev
      - .:/app/Dev_Source
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    working_dir: /app
    networks:
      - projectNetwork
    tty: true

volumes:
  ML_Data:
networks:
  projectNetwork: