services:

  web-server:
    build:
      dockerfile: ./src/WebServer/Dockerfile
    image: web-server

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork
    ports:
      - "5000:5000"

    deploy:
      replicas: 1

    entrypoint: python main.py --subsystem Webserver

# ===== Stores =====
  experience-store:
    build:
      dockerfile: ./src/ExperienceStore/Dockerfile
    image: experience-store

    volumes:
      # add output dictionary for the learned data
      - ./Data:/app/Data

      # dictionaries for dev
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork
    expose:
      - 5001

    deploy:
      replicas: 1

    entrypoint: python main.py --subsystem ExperienceStore

  model-store:
    image: redis

    volumes:
      - ./Data:/app/Data

    networks:
      - projectNetwork
    expose:
      - 5002

    deploy:
      replicas: 1

    entrypoint: redis-server --port 5002

# ===== Learners =====
  learner-value:
    build:
        dockerfile: ./src/Learner/Dockerfile
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Value

  learner-policy:
    build:
        dockerfile: ./src/Learner/Dockerfile
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Policy

  learner-humanlike:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Human_Discriminator --exampleType human
    # tty: true

  learner-curatedlike:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model PlayStyle_Discriminator --exampleType curated
    # tty: true

  # learner-forward:
  learner-Forward:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Forward

  learner-Forward-NextState:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Forward_NextState

  learner-Forward-Reward:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Forward_Reward

  learner-Forward-Terminated:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Forward_Terminated


# ===== Workers =====
  worker-rng-explore:
    build:
      dockerfile: ./src/Worker/Dockerfile
    image: worker

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Worker --agent Random --play False --saveReplay False

  worker-ml-explore:
    build:
      dockerfile: ./src/Worker/Dockerfile
    image: worker

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: ${EVAL_WORKERS}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Worker --agent ML --play False --saveReplay False

  worker-eval:
    build:
      dockerfile: ./src/Worker/Dockerfile
    image: worker

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: ${EVAL_WORKERS}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    # entrypoint: python main.py --subsystem Evaluation --agent ML --play True --saveReplay True
    tty: true


networks:
  projectNetwork:

