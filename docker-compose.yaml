services:

  web-server:
    build:
      dockerfile: ./src/WebServer/Dockerfile
    image: web-server

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork
    ports:
      - "5000:5000"

    deploy:
      replicas: 1

    entrypoint: python main.py --subsystem Webserver --env /app/Config/Envs/${ENV_CONFIG_PATH} --rungroup ${RUN_GROUP}

# ===== Stores =====
  experience-store:
    build:
      dockerfile: ./src/ExperienceStore/Dockerfile
    image: experience-store

    volumes:
      # add output dictionary for the learned data
      - ./Data:/app/Data

      # dictionaries for dev
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork
    expose:
      - 5001

    deploy:
      replicas: 1

    entrypoint: python main.py --subsystem ExperienceStore --env /app/Config/Envs/${ENV_CONFIG_PATH} --rungroup ${RUN_GROUP}

  model-store:
    image: redis

    volumes:
      - ./Data:/app/Data

    networks:
      - projectNetwork
    expose:
      - 5002

    deploy:
      replicas: 1

    entrypoint: redis-server --port 5002 --save 60 1

# ===== Learners =====
#   learner-policy:
#     build:
#       dockerfile: ./src/Learner/Dockerfile
#     image: learner

#     volumes:
#       - ./Data:/app/Data
#       - ./src:/app/src
#       - ./Config:/app/Config

#     working_dir: /app
#     networks:
#       - projectNetwork

#     deploy:
#       replicas: 1
#       resources:
#         reservations:
#           devices:
#             - driver: nvidia
#               count: 1
#               capabilities: [gpu]

#     env_file:
#       - secrets.env

#     entrypoint: python main.py --subsystem Learner --model Policy --env /app/Config/Envs/${ENV_CONFIG_PATH} --wandb ${LOG_TO_WANDB} --rungroup ${RUN_GROUP} --load ${LOAD_LAST_RUN} --exampleType human

  learner-value:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Value --env /app/Config/Envs/${ENV_CONFIG_PATH} --wandb ${LOG_TO_WANDB} --rungroup ${RUN_GROUP} --load ${LOAD_LAST_RUN} --exampleType human

  learner-forward:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model Forward --env /app/Config/Envs/${ENV_CONFIG_PATH} --wandb ${LOG_TO_WANDB} --rungroup ${RUN_GROUP} --load ${LOAD_LAST_RUN} --exampleType human

  learner-humanlike:
    image: learner

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Learner --model HumanDiscriminator --env /app/Config/Envs/${ENV_CONFIG_PATH} --wandb ${LOG_TO_WANDB} --rungroup ${RUN_GROUP} --load ${LOAD_LAST_RUN} --exampleType human
    # tty: true


# ===== Workers =====
  worker-explore:
    build:
      dockerfile: ./src/Worker/Dockerfile
    image: worker

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: ${EXPLORE_WORKERS}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Worker --env /app/Config/Envs/${ENV_CONFIG_PATH} --agent Random --play False --wandb ${LOG_TO_WANDB} --rungroup ${RUN_GROUP} --exampleType human


  worker-eval:
    build:
      dockerfile: ./src/Worker/Dockerfile
    image: worker

    volumes:
      - ./Data:/app/Data
      - ./src:/app/src
      - ./Config:/app/Config

    working_dir: /app
    networks:
      - projectNetwork

    deploy:
      replicas: ${EVAL_WORKERS}
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    env_file:
      - secrets.env

    entrypoint: python main.py --subsystem Worker --env /app/Config/Envs/${ENV_CONFIG_PATH} --agent ML --play True --wandb ${LOG_TO_WANDB} --rungroup ${RUN_GROUP} --exampleType human


networks:
  projectNetwork:

